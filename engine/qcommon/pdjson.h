#ifndef PDJSON_H
#define PDJSON_H

// pdjson.h: This is a modified version of the PDJson library, forked off of commit 67108d8. It is used for parsing JSON returned from Zombono Online and font metadata
// generated by FontBuilder, as well as other, yet undefined, uses.
// February 8, 2024

#ifdef __cplusplus
extern "C" {
#else
// MSVC is mentally deranged and defines __STDC_VERSION__ as 199409L even though it supports up to C17 and maybe even C2x
// 1800 = Visual Studio 2013, when they FINALLY added C99 support
#if (defined(_MSC_VER) && _MSC_VER >= 1800) || defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
    #include <stdbool.h>
#else
    #ifndef bool
        #define bool int
        #define true 1
        #define false 0
    #endif /* bool */
#endif /* __STDC_VERSION__ */
#endif /* __cplusplus */

#include <stdio.h>

enum JSON_type {
    JSON_ERROR = 1, JSON_DONE,
    JSON_OBJECT, JSON_OBJECT_END, JSON_ARRAY, JSON_ARRAY_END,
    JSON_STRING, JSON_NUMBER, JSON_TRUE, JSON_FALSE, JSON_NULL
};

struct JSON_allocator {
    void *(*malloc)(size_t);
    void *(*realloc)(void *, size_t);
    void (*free)(void *);
};

typedef int (*JSON_user_io)(void *user);

typedef struct JSON_stream JSON_stream;
typedef struct JSON_allocator JSON_allocator;

void JSON_open_buffer(JSON_stream *json, const void *buffer, size_t size);
void JSON_open_string(JSON_stream *json, const char *string);
void JSON_open_stream(JSON_stream *json, FILE *stream);
void JSON_open_user(JSON_stream *json, JSON_user_io get, JSON_user_io peek, void *user);
void JSON_close(JSON_stream *json);

void JSON_set_allocator(JSON_stream *json, JSON_allocator *a);
void JSON_set_streaming(JSON_stream *json, bool mode);

enum JSON_type JSON_next(JSON_stream *json);
enum JSON_type JSON_peek(JSON_stream *json);
void JSON_reset(JSON_stream *json);
const char *JSON_get_string(JSON_stream *json, size_t *length);
double JSON_get_number(JSON_stream *json);

enum JSON_type JSON_skip(JSON_stream *json);
enum JSON_type JSON_skip_until(JSON_stream *json, enum JSON_type type);

size_t JSON_get_lineno(JSON_stream *json);
size_t JSON_get_position(JSON_stream *json);
size_t JSON_get_depth(JSON_stream *json);
enum JSON_type JSON_get_context(JSON_stream *json, size_t *count);
const char *JSON_get_error(JSON_stream *json);

int JSON_source_get(JSON_stream *json);
int JSON_source_peek(JSON_stream *json);
bool JSON_isspace(int c);

/* internal */

struct JSON_source {
    int (*get)(struct JSON_source *);
    int (*peek)(struct JSON_source *);
    size_t position;
    union {
        struct {
            FILE *stream;
        } stream;
        struct {
            const char *buffer;
            size_t length;
        } buffer;
        struct {
            void *ptr;
            JSON_user_io get;
            JSON_user_io peek;
        } user;
    } source;
};

struct JSON_stream {
    size_t lineno;

    struct JSON_stack *stack;
    size_t stack_top;
    size_t stack_size;
    enum JSON_type next;
    unsigned flags;

    struct {
        char *string;
        size_t string_fill;
        size_t string_size;
    } data;

    size_t ntokens;

    struct JSON_source source;
    struct JSON_allocator alloc;
    char errmsg[128];
};

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
